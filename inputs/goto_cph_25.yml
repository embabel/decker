slideCount: 45
presenterBio: >
  Rod Johnson, Embabel. Creator of Spring and Embabel

brief: >
  
  General notes:
  - DO NOT cram text on slides. Be zen and minimalist, conveying your ideas concisely.
  NO BULLET LISTS longer than 5 (and that should be rare!) - NO ENTIRE PARAGRAPHS
  - NEVER make up any code. Look in the given projects.
  Use tools to find code if necessary.

  Desired presentation flow:

  Gen AI is amazing. show cool examples for personal use, 
  personal assistant use case is compelling
  Show failure statistics on agent projects in business, recent MIT gartner etc, with quotes
  
  Diagnose causes for this: 
  - Technology is nondeterministic, it's slow and expensive to run, 
  - things change all the time, 
  - best practice is emerging:
  - it's not integrated with business, it's coming out of a different team, Python frameworks aren't aligned with business
  - it's excessively vendor driven, vendors selling snake oil
  - central AI teams often don't understand the business and don't care about it

  How do we fix this? Firstly we attack the nondeterminism and make agents as predictable as possible. 
  Second we integrate with what already works and not imagine we can reinvent the world
  
  Integration with existing domain models is critical. Hence the importance of
  Domain-Integrated Context Engineering. Show DICE graphic from Rod's blog.

  What is the role of Java developers?

  We could imitate the Python world and copy their approaches. 
  That approach is doomed to failure and if that's the best we can do 

  Or we could do more than play catchup. 
  We could bring our assets to far superior approach
  We understand the domain, much of the critical business logic is already in Java
  We also have a strong understanding of software architecture at scale. 

  The JVM has a key role to play in the future of Gen AI in the enterprise.
  Python is a great language for scripting and data science,
  but IF YOU HAVE ZERO ENTERPRISE APPS IN PYTHON, THAT REMAINS THE RIGHT NUMBER.
  
  Once more the Java community can do with Spring and open source did in 
  taking back control from vendors and demonstrating what works

  Embabel is a framework that attacks every one of the challenges that cause Gen AI failures.
  Not being the first mover is in this case a big advantage. As with Spring
  it learns from what's there and adds genuinely new ideas
  - Unique innovative planning element that is smart but deterministic. Actions/Goals allow an extensible system better than FSM of LangGraph or Crew AI but will always do the same thing
  - Emphasis on strong typing and tooling
  - Brings structure to LLM interactions vs just text (consider Embabel vs Python Crew AI examples)
  - Ability to mix code actions and LLM invocation seamlessly for the maximum predictability possible (because of structure)
  - Emphasis on domain modelling  and potential to integrate with what's already there
  - Builds on Spring for easy adoption in Java
  - Lovely modern API in Java or Kotlin
  - Highly testable

  As an example of Embabel's power, this slide deck was built by Embabel.
  The Decker agent illustrates the core ideas. Show example of how
  Agents and Goals and AchievesGoal drawn work from this project (Decker.kt)
  
  Conclusion:

  You could go with vendor snake oil or start from scratch 
  with a Python framework. Massive risk. 
  Or try Embabel, the best agent framework anywhere, with genuinely new ideas.
  Bring your existing skills to the Gen AI world.
  
  CTA:
  Put a little Gen AI into your apps today and then grow towards 
  the full potential of unlocking your business value
  
  Use the Embabel java-agent-template to get started
  What will you automate first?

header: |
  ---
  marp: true
  title: Gen AI Grows Up: Building Production-Ready Agents on the JVM
  theme: default
  paginate: false
  class: invert
  size: 16:9
  ---

images:
  embabel:
    useWhen: start of deck on title slide, end of deck. it's a tall image
    url: https://raw.githubusercontent.com/embabel/embabel-agent/refs/heads/main/embabel-agent-api/images/315px-Meister_der_Weltenchronik_001.jpg
  spring:
    useWhen: on first slide mentioning spring
    url: https://upload.wikimedia.org/wikipedia/commons/4/44/Spring_Framework_Logo_2018.svg
  dice:
    useWhen: DICE is mentioned
    url: https://miro.medium.com/v2/resize:fit:1400/format:webp/1*wGd1RUwA0IDfTZa9MNZPGQ.jpeg
  planning:
    useWhen: Embabel planning is mentioned
    url: https://miro.medium.com/v2/resize:fit:1400/format:webp/1*7zRgQXOVCCTeXIJdCyL7FQ.png
  java:
    useWhen: x
    url: https://upload.wikimedia.org/wikipedia/en/3/30/Java_programming_language_logo.svg
  spring-ai:
    useWhen: first slide mentioning Spring AI
    url: https://raw.githubusercontent.com/spring-io/spring-io-static/refs/heads/main/blog/tzolov/20250520/spring-ai-logo.png


outputFile: goto.md

autoIllustrate: true

references:
  - type: github
    url: https://github.com/embabel/embabel-agent
    description: Embabel Agent Framework repository
  - type: github
    url: https://github.com/embabel/embabel-agent-examples
    description: Embabel Agent Framework examples repository
  - type: github
    url: https://github.com/embabel/java-agent-template
    description: Embabel Java agent template which you can create your own projects from
  - type: github
    url: https://github.com/embabel/decker
    description: The implementation of the presentation builder used to create this slide deck
  - type: webpage
    url: https://gotocph.com/2025/sessions/3893/gen-ai-grows-up-building-production-ready-agents-on-the-jvm
    description: GOTO Copenhagen 2025 session details
  - type: webpage
    url: https://medium.com/@springrod
    description: Rod Johnson medium blog, read the individual blogs
  - type: api
    name: embabel-agent
    description: Embabel Agent API
    acceptedPackages:
      - com.embabel.agent
      - com.embabel.common

coStar:
  context: talk at Goto Copenhagen 2025
  objective: >
    inspire the audience to look to the JVM for production ready Gen AI
    and to try Embabel
    Convey that Embabel is truly innovative
  style: Rod Johnson on programming
  tone: informative and entertaining. be provocative and challenge the audience
  audience: Enterprise developers considering Gen AI